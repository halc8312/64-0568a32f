{
  "key": "backendHandlesList",
  "value": [
    {
      "id": "BAC-001",
      "category": "認証・認可",
      "handleName": "ユーザー認証処理",
      "description": "メールアドレスとパスワードを使用したユーザー認証を行い、JWTトークンを発行する",
      "handleProcedure": "1. リクエストからメールアドレスとパスワードを取得\n2. パスワードのハッシュ化\n3. データベースでユーザー情報を検証\n4. JWTトークンの生成\n5. レスポンスとしてトークンを返却",
      "fileName": "auth-login.ts",
      "relatedScreen": "SCR-002",
      "relatedFrontendCode": "\"use client\"\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport { FaGoogle, FaGithub, FaTwitter } from 'react-icons/fa'\nimport { MdEmail, MdLock } from 'react-icons/md'\nimport { supabase } from '@/supabase'\n\nexport default function Login() {\n  const router = useRouter()\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n\n      if (error) throw error\n\n      router.push('/')\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSocialLogin = async (provider: 'google' | 'github' | 'twitter') => {\n    try {\n      const { data, error } = await supabase.auth.signInWithOAuth({\n        provider: provider,\n      })\n      if (error) throw error\n    } catch (err: any) {\n      setError(err.message)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-[#F8F9FA] flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8 bg-white p-8 rounded-lg shadow-lg\">\n        <div className=\"text-center\">\n          <Image\n            src=\"https://placehold.co/100x100\"\n            alt=\"Logo\"\n            width={100}\n            height={100}\n            className=\"mx-auto\"\n          />\n          <h2 className=\"mt-6 text-center text-3xl font-bold text-gray-900\">\n            アカウントにログイン\n          </h2>\n        </div>\n        <form className=\"mt-8 space-y-6\" onSubmit={handleLogin}>\n          {error && (\n            <div className=\"bg-red-50 text-red-500 p-3 rounded text-sm\">\n              {error}\n            </div>\n          )}\n          <div className=\"rounded-md -space-y-px\">\n            <div className=\"mb-4\">\n              <div className=\"flex items-center\">\n                <MdEmail className=\"text-gray-400 mr-2\" />\n                <input\n                  type=\"email\"\n                  required\n                  className=\"appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-[#4A90E2] focus:border-[#4A90E2]\"\n                  placeholder=\"メールアドレス\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </div>\n            </div>\n            <div>\n              <div className=\"flex items-center\">\n                <MdLock className=\"text-gray-400 mr-2\" />\n                <input\n                  type=\"password\"\n                  required\n                  className=\"appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-[#4A90E2] focus:border-[#4A90E2]\"\n                  placeholder=\"パスワード\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-[#4A90E2] hover:bg-[#357ABD] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#4A90E2]\"\n            >\n              {loading ? 'ログイン中...' : 'ログイン'}\n            </button>\n          </div>\n\n          <div className=\"text-center\">\n            <Link\n              href=\"/reset-password\"\n              className=\"text-sm text-[#4A90E2] hover:text-[#357ABD]\"\n            >\n              パスワードをお忘れの方はこちら\n            </Link>\n          </div>\n        </form>\n\n        <div className=\"mt-6\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <div className=\"w-full border-t border-gray-300\"></div>\n            </div>\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"px-2 bg-white text-gray-500\">\n                またはSNSでログイン\n              </span>\n            </div>\n          </div>\n\n          <div className=\"mt-6 grid grid-cols-3 gap-3\">\n            <button\n              onClick={() => handleSocialLogin('google')}\n              className=\"flex justify-center items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\"\n            >\n              <FaGoogle className=\"text-red-500\" />\n            </button>\n            <button\n              onClick={() => handleSocialLogin('github')}\n              className=\"flex justify-center items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\"\n            >\n              <FaGithub className=\"text-gray-900\" />\n            </button>\n            <button\n              onClick={() => handleSocialLogin('twitter')}\n              className=\"flex justify-center items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\"\n            >\n              <FaTwitter className=\"text-[#1DA1F2]\" />\n            </button>\n          </div>\n        </div>\n\n        <div className=\"text-center mt-4\">\n          <span className=\"text-gray-600\">アカウントをお持ちでない方は</span>\n          <Link\n            href=\"/register\"\n            className=\"ml-1 text-[#4A90E2] hover:text-[#357ABD]\"\n          >\n            新規登録\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    {
      "id": "BAC-002",
      "category": "認証・認可",
      "handleName": "パスワードリセット",
      "description": "ユーザーのパスワードリセットリンクを生成し、メールで送信する",
      "handleProcedure": "1. リクエストからメールアドレスを取得\n2. パスワードリセットトークンの生成\n3. リセットリンクの作成\n4. メール送信処理\n5. 完了通知の返却",
      "fileName": "auth-reset-password.ts",
      "relatedScreen": "SCR-020",
      "relatedFrontendCode": "\"use client\"\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { supabase } from '@/supabase'\nimport { FiMail, FiArrowLeft } from 'react-icons/fi'\n\nexport default function PasswordReset() {\n  const router = useRouter()\n  const [email, setEmail] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const [error, setError] = useState('')\n\n  const handlePasswordReset = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n    setMessage('')\n\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/password-update`,\n      })\n\n      if (error) throw error\n\n      setMessage('パスワードリセットのメールを送信しました。メールをご確認ください。')\n    } catch (error: any) {\n      setError('パスワードリセットに失敗しました。もう一度お試しください。')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50 flex flex-col\">\n      <div className=\"flex-1 flex flex-col justify-center items-center px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div>\n            <Link \n              href=\"/login\"\n              className=\"flex items-center text-sm text-gray-600 hover:text-gray-900 mb-8\"\n            >\n              <FiArrowLeft className=\"mr-2\" />\n              ログイン画面に戻る\n            </Link>\n            <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n              パスワードをリセット\n            </h2>\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\n              登録したメールアドレスを入力してください。\n              <br />\n              パスワードリセット用のリンクをお送りします。\n            </p>\n          </div>\n          <form className=\"mt-8 space-y-6\" onSubmit={handlePasswordReset}>\n            <div className=\"rounded-md shadow-sm -space-y-px\">\n              <div className=\"relative\">\n                <FiMail className=\"absolute top-3 left-3 text-gray-400\" />\n                <input\n                  type=\"email\"\n                  required\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"appearance-none rounded-md relative block w-full px-10 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\n                  placeholder=\"メールアドレス\"\n                />\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"rounded-md bg-red-50 p-4\">\n                <div className=\"text-sm text-red-700\">{error}</div>\n              </div>\n            )}\n\n            {message && (\n              <div className=\"rounded-md bg-green-50 p-4\">\n                <div className=\"text-sm text-green-700\">{message}</div>\n              </div>\n            )}\n\n            <div>\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {loading ? 'sending...' : 'リセットメールを送信'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    {
      "id": "BAC-003",
      "category": "性格診断",
      "handleName": "性格タイプ判定処理",
      "description": "ユーザーの回答データを分析し、64種類の性格タイプから最適なタイプを判定する",
      "handleProcedure": "1. 回答データの取得と検証\n2. 回答パターンの分析\n3. アルゴリズムによる性格タイプの判定\n4. 判定結果の保存\n5. 結果の返却",
      "fileName": "diagnosis-analyze.ts",
      "relatedScreen": "SCR-004",
      "relatedFrontendCode": "\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { useRouter, useParams } from 'next/navigation'\nimport { FiArrowLeft, FiArrowRight } from 'react-icons/fi'\nimport { supabase } from '@/supabase'\n\nconst questions = [\n  {\n    id: 1,\n    text: \"新しい環境に置かれたとき、あなたは...\",\n    options: [\n      \"積極的に周りに話しかける\",\n      \"様子を見ながら徐々に慣れていく\",\n      \"自分のペースを保つことを優先する\",\n      \"環境に応じて柔軟に対応する\"\n    ]\n  },\n  {\n    id: 2,\n    text: \"重要な決定を下すとき、あなたは...\",\n    options: [\n      \"直感を重視する\",\n      \"論理的に考える\",\n      \"他人の意見を参考にする\",\n      \"時間をかけて熟考する\"\n    ]\n  },\n  // 他の質問も同様に追加\n]\n\nexport default function DiagnosisQuestion() {\n  const router = useRouter()\n  const params = useParams()\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n  const [answers, setAnswers] = useState<{[key: number]: number}>({})\n  const [selectedOption, setSelectedOption] = useState<number | null>(null)\n\n  useEffect(() => {\n    const questionId = Number(params.id)\n    setCurrentQuestionIndex(questionId - 1)\n  }, [params.id])\n\n  const handleAnswer = async (optionIndex: number) => {\n    setSelectedOption(optionIndex)\n    const updatedAnswers = {\n      ...answers,\n      [currentQuestionIndex]: optionIndex\n    }\n    setAnswers(updatedAnswers)\n  }\n\n  const handleNext = async () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      router.push(`/diagnosis/question/${currentQuestionIndex + 2}`)\n      setSelectedOption(null)\n    } else {\n      try {\n        const { data: { user } } = await supabase.auth.getUser()\n        \n        await supabase.from('personality_diagnoses').insert({\n          user_id: user?.id,\n          answers: answers,\n          diagnosed_at: new Date().toISOString()\n        })\n\n        router.push('/diagnosis/result')\n      } catch (error) {\n        console.error('Error saving diagnosis:', error)\n      }\n    }\n  }\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      router.push(`/diagnosis/question/${currentQuestionIndex}`)\n    }\n  }\n\n  const currentQuestion = questions[currentQuestionIndex]\n  const progress = ((currentQuestionIndex + 1) / questions.length) * 100\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50 py-8 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-3xl mx-auto\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n          <div className=\"mb-6\">\n            <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n              <div\n                className=\"bg-blue-600 h-2.5 rounded-full transition-all duration-300\"\n                style={{ width: `${progress}%` }}\n              ></div>\n            </div>\n            <p className=\"text-right text-sm text-gray-600 mt-2\">\n              {currentQuestionIndex + 1} / {questions.length}\n            </p>\n          </div>\n\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-8\">\n            {currentQuestion.text}\n          </h2>\n\n          <div className=\"space-y-4\">\n            {currentQuestion.options.map((option, index) => (\n              <button\n                key={index}\n                onClick={() => handleAnswer(index)}\n                className={`w-full text-left p-4 rounded-lg border transition-all duration-200 \n                  ${selectedOption === index \n                    ? 'border-blue-500 bg-blue-50' \n                    : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50'\n                  }`}\n              >\n                {option}\n              </button>\n            ))}\n          </div>\n\n          <div className=\"flex justify-between mt-8\">\n            <button\n              onClick={handlePrevious}\n              disabled={currentQuestionIndex === 0}\n              className={`flex items-center px-4 py-2 rounded-lg\n                ${currentQuestionIndex === 0 \n                  ? 'text-gray-400 cursor-not-allowed' \n                  : 'text-blue-600 hover:bg-blue-50'\n                }`}\n            >\n              <FiArrowLeft className=\"mr-2\" />\n              前の質問\n            </button>\n\n            <button\n              onClick={handleNext}\n              disabled={selectedOption === null}\n              className={`flex items-center px-6 py-2 rounded-lg\n                ${selectedOption === null\n                  ? 'bg-gray-300 cursor-not-allowed'\n                  : 'bg-blue-600 text-white hover:bg-blue-700'\n                }`}\n            >\n              {currentQuestionIndex === questions.length - 1 ? '診断する' : '次へ'}\n              <FiArrowRight className=\"ml-2\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    {
      "id": "BAC-004",
      "category": "アドバイス生成",
      "handleName": "個別アドバイス生成",
      "description": "性格タイプに基づいた恋愛、仕事、金銭管理に関する個別化されたアドバイスを生成する",
      "handleProcedure": "1. 性格タイプデータの取得\n2. カテゴリー別アドバイステンプレートの選択\n3. パーソナライズされたアドバイスの生成\n4. アドバイスデータの保存\n5. 生成結果の返却",
      "fileName": "advice-generate.ts",
      "relatedScreen": "SCR-006",
      "relatedFrontendCode": "\"use client\"\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { FaBriefcase, FaHeart, FaMoneyBillWave, FaChartLine } from 'react-icons/fa'\nimport { BiTime } from 'react-icons/bi'\nimport { supabase } from '@/supabase'\n\ntype AdviceRecord = {\n  category: string\n  advice_content: {\n    title: string\n    description: string\n  }\n}\n\nexport default function AdviceTop() {\n  const router = useRouter()\n  const [recentAdvice, setRecentAdvice] = useState<AdviceRecord[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchRecentAdvice = async () => {\n      try {\n        const { data: session } = await supabase.auth.getSession()\n        if (!session) {\n          router.push('/login')\n          return\n        }\n\n        const { data, error } = await supabase\n          .from('advice_records')\n          .select('category, advice_content')\n          .order('created_at', { ascending: false })\n          .limit(3)\n\n        if (error) throw error\n\n        setRecentAdvice(data || [])\n      } catch (error) {\n        console.error('Error fetching advice:', error)\n        setRecentAdvice([\n          {\n            category: '恋愛',\n            advice_content: {\n              title: 'サンプルアドバイス',\n              description: '恋愛に関する最近のアドバイス'\n            }\n          }\n        ])\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchRecentAdvice()\n  }, [router])\n\n  const categories = [\n    { name: '恋愛', icon: <FaHeart />, path: '/advice/love', color: 'bg-pink-500' },\n    { name: '仕事', icon: <FaBriefcase />, path: '/advice/work', color: 'bg-blue-500' },\n    { name: '金銭管理', icon: <FaMoneyBillWave />, path: '/advice/money', color: 'bg-green-500' },\n    { name: '相性診断', icon: <FaChartLine />, path: '/advice/compatibility', color: 'bg-purple-500' }\n  ]\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"max-w-6xl mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-8\">アドバイス</h1>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n          {categories.map((category) => (\n            <Link href={category.path} key={category.name}>\n              <div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300\">\n                <div className={`${category.color} w-12 h-12 rounded-full flex items-center justify-center text-white mb-4`}>\n                  <span className=\"text-xl\">{category.icon}</span>\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-800\">{category.name}</h3>\n                <p className=\"text-gray-600 mt-2\">あなたの性格タイプに基づいた{category.name}のアドバイスを確認できます</p>\n              </div>\n            </Link>\n          ))}\n        </div>\n\n        <section className=\"mb-12\">\n          <div className=\"flex items-center mb-6\">\n            <BiTime className=\"text-2xl text-gray-600 mr-2\" />\n            <h2 className=\"text-2xl font-bold text-gray-800\">最近のアドバイス</h2>\n          </div>\n          \n          {loading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto\"></div>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {recentAdvice.map((advice, index) => (\n                <div key={index} className=\"bg-white rounded-lg shadow-md p-6\">\n                  <span className=\"inline-block px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 mb-4\">\n                    {advice.category}\n                  </span>\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">{advice.advice_content.title}</h3>\n                  <p className=\"text-gray-600\">{advice.advice_content.description}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </section>\n\n        <section className=\"bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg p-8 text-white\">\n          <h2 className=\"text-2xl font-bold mb-4\">あなたへのおすすめ</h2>\n          <p className=\"mb-6\">より詳しい性格分析とアドバイスを受けてみませんか？</p>\n          <Link href=\"/diagnosis\">\n            <button className=\"bg-white text-blue-500 px-6 py-2 rounded-lg font-semibold hover:bg-opacity-90 transition-colors duration-300\">\n              新しい診断を開始\n            </button>\n          </Link>\n        </section>\n      </div>\n    </div>\n  )\n}"
    },
    {
      "id": "BAC-005",
      "category": "データ分析",
      "handleName": "診断結果比較分析",
      "description": "複数の診断結果を比較分析し、変化や傾向を抽出する",
      "handleProcedure": "1. 複数の診断結果データの取得\n2. データの正規化と比較分析\n3. 変化点や特徴的な傾向の抽出\n4. 分析結果のビジュアル化データ生成\n5. 分析結果の返却",
      "fileName": "analysis-compare.ts",
      "relatedScreen": "SCR-015",
      "relatedFrontendCode": "\"use client\"\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { supabase } from '@/supabase'\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts'\nimport { FiArrowLeft, FiCalendar, FiBarChart2 } from 'react-icons/fi'\n\ntype PersonalityDiagnosis = {\n  id: string\n  personality_type: {\n    type: string\n    scores: {\n      category: string\n      score: number\n    }[]\n  }\n  diagnosed_at: string\n}\n\nexport default function CompareResults() {\n  const router = useRouter()\n  const [diagnoses, setDiagnoses] = useState<PersonalityDiagnosis[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchDiagnoses()\n  }, [])\n\n  const fetchDiagnoses = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (!user) {\n        router.push('/auth/login')\n        return\n      }\n\n      const { data, error } = await supabase\n        .from('personality_diagnoses')\n        .select('id, personality_type, diagnosed_at')\n        .eq('user_id', user.id)\n        .order('diagnosed_at', { ascending: false })\n        .limit(3)\n\n      if (error) throw error\n\n      setDiagnoses(data || [])\n    } catch (error) {\n      console.error('Error fetching diagnoses:', error)\n      // サンプルデータ\n      setDiagnoses([\n        {\n          id: '1',\n          personality_type: {\n            type: 'タイプA',\n            scores: [\n              { category: '外向性', score: 80 },\n              { category: '協調性', score: 65 },\n              { category: '勤勉性', score: 70 }\n            ]\n          },\n          diagnosed_at: '2024-01-01'\n        },\n        {\n          id: '2',\n          personality_type: {\n            type: 'タイプB',\n            scores: [\n              { category: '外向性', score: 75 },\n              { category: '協調性', score: 70 },\n              { category: '勤勉性', score: 75 }\n            ]\n          },\n          diagnosed_at: '2024-01-15'\n        }\n      ])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const renderTimelineChart = () => {\n    const data = diagnoses.map(d => ({\n      date: new Date(d.diagnosed_at).toLocaleDateString(),\n      ...d.personality_type.scores.reduce((acc, score) => ({\n        ...acc,\n        [score.category]: score.score\n      }), {})\n    }))\n\n    return (\n      <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n        <h3 className=\"text-xl font-bold mb-4\">時系列変化</h3>\n        <div className=\"h-[300px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={data}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              {diagnoses[0]?.personality_type.scores.map((score, index) => (\n                <Line\n                  key={score.category}\n                  type=\"monotone\"\n                  dataKey={score.category}\n                  stroke={`hsl(${index * 120}, 70%, 50%)`}\n                />\n              ))}\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n    )\n  }\n\n  const renderRadarChart = () => {\n    const latestDiagnosis = diagnoses[0]\n    if (!latestDiagnosis) return null\n\n    return (\n      <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n        <h3 className=\"text-xl font-bold mb-4\">特性比較</h3>\n        <div className=\"h-[300px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <RadarChart data={latestDiagnosis.personality_type.scores}>\n              <PolarGrid />\n              <PolarAngleAxis dataKey=\"category\" />\n              <PolarRadiusAxis />\n              <Radar\n                name={latestDiagnosis.personality_type.type}\n                dataKey=\"score\"\n                fill=\"#4A90E2\"\n                fillOpacity={0.6}\n              />\n            </RadarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center mb-8\">\n          <Link href=\"/history\" className=\"text-gray-600 hover:text-gray-800 mr-4\">\n            <FiArrowLeft size={24} />\n          </Link>\n          <h1 className=\"text-2xl font-bold\">診断結果比較</h1>\n        </div>\n\n        {loading ? (\n          <div className=\"flex justify-center items-center h-64\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900\"></div>\n          </div>\n        ) : (\n          <div className=\"space-y-8\">\n            <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n              <h2 className=\"text-xl font-bold mb-4\">比較概要</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {diagnoses.map((diagnosis, index) => (\n                  <div key={diagnosis.id} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-500\">\n                        <FiCalendar className=\"inline mr-2\" />\n                        {new Date(diagnosis.diagnosed_at).toLocaleDateString()}\n                      </span>\n                      <span className=\"text-sm font-medium text-blue-600\">\n                        #{index + 1}\n                      </span>\n                    </div>\n                    <h3 className=\"text-lg font-semibold mb-2\">\n                      {diagnosis.personality_type.type}\n                    </h3>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {renderTimelineChart()}\n            {renderRadarChart()}\n\n            <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n              <h3 className=\"text-xl font-bold mb-4\">主な変化点</h3>\n              <ul className=\"space-y-4\">\n                {diagnoses.length > 1 && diagnoses[0].personality_type.scores.map((score, index) => {\n                  const prevScore = diagnoses[1].personality_type.scores[index].score\n                  const diff = score.score - prevScore\n                  return (\n                    <li key={score.category} className=\"flex items-center\">\n                      <FiBarChart2 className=\"mr-2\" />\n                      <span className=\"font-medium\">{score.category}:</span>\n                      <span className={`ml-2 ${diff > 0 ? 'text-green-600' : diff < 0 ? 'text-red-600' : 'text-gray-600'}`}>\n                        {diff > 0 ? '+' : ''}{diff}%\n                      </span>\n                    </li>\n                  )\n                })}\n              </ul>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}"
    },
    {
      "id": "BAC-006",
      "category": "シェア機能",
      "handleName": "シェアコンテンツ生成",
      "description": "診断結果をSNSでシェアするための最適化されたコンテンツを生成する",
      "handleProcedure": "1. 診断結果データの取得\n2. シェア設定の適用\n3. SNSプラットフォームに適した形式でのコンテンツ生成\n4. シェアURLの生成\n5. 生成したコンテンツの返却",
      "fileName": "share-content-generate.ts",
      "relatedScreen": "SCR-009",
      "relatedFrontendCode": "\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport { FaTwitter, FaFacebook, FaLine, FaLink } from 'react-icons/fa'\nimport { supabase } from '@/supabase'\n\ntype ShareSettings = {\n  includePersonalityType: boolean\n  includeAdvice: boolean\n  includeCompatibility: boolean\n  customMessage: string\n}\n\ntype SharePlatform = 'twitter' | 'facebook' | 'line' | 'copy'\n\nexport default function ShareSettings({ params }: { params: { id: string } }) {\n  const router = useRouter()\n  const [settings, setSettings] = useState<ShareSettings>({\n    includePersonalityType: true,\n    includeAdvice: true,\n    includeCompatibility: true,\n    customMessage: ''\n  })\n  const [diagnoseData, setDiagnoseData] = useState<any>(null)\n  const [shareUrl, setShareUrl] = useState('')\n  const [copied, setCopied] = useState(false)\n\n  useEffect(() => {\n    const fetchDiagnoseData = async () => {\n      const { data, error } = await supabase\n        .from('personality_diagnoses')\n        .select('personality_type')\n        .eq('id', params.id)\n        .single()\n\n      if (error) {\n        console.error('Error fetching diagnose data:', error)\n        return\n      }\n\n      setDiagnoseData(data)\n    }\n\n    fetchDiagnoseData()\n  }, [params.id])\n\n  const handleSettingChange = (key: keyof ShareSettings, value: boolean | string) => {\n    setSettings(prev => ({ ...prev, [key]: value }))\n  }\n\n  const generateShareContent = async () => {\n    try {\n      const response = await fetch('/api/share-content-generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          diagnoseId: params.id,\n          settings\n        }),\n      })\n      const data = await response.json()\n      setShareUrl(data.shareUrl)\n\n      await supabase.from('shared_contents').insert({\n        diagnosis_id: params.id,\n        share_settings: settings,\n        share_url: data.shareUrl\n      })\n    } catch (error) {\n      console.error('Error generating share content:', error)\n    }\n  }\n\n  const handleShare = async (platform: SharePlatform) => {\n    if (!shareUrl) {\n      await generateShareContent()\n    }\n\n    const shareText = `私の性格診断結果をチェックしてください！ ${settings.customMessage}`\n    const encodedText = encodeURIComponent(shareText)\n    const encodedUrl = encodeURIComponent(shareUrl || window.location.href)\n\n    switch (platform) {\n      case 'twitter':\n        window.open(`https://twitter.com/intent/tweet?text=${encodedText}&url=${encodedUrl}`)\n        break\n      case 'facebook':\n        window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`)\n        break\n      case 'line':\n        window.open(`https://social-plugins.line.me/lineit/share?url=${encodedUrl}`)\n        break\n      case 'copy':\n        navigator.clipboard.writeText(shareUrl)\n        setCopied(true)\n        setTimeout(() => setCopied(false), 2000)\n        break\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-8\">シェア設定</h1>\n\n        <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">シェア内容のカスタマイズ</h2>\n          \n          <div className=\"space-y-4\">\n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={settings.includePersonalityType}\n                onChange={(e) => handleSettingChange('includePersonalityType', e.target.checked)}\n                className=\"form-checkbox h-5 w-5 text-blue-600\"\n              />\n              <span>性格タイプを含める</span>\n            </label>\n\n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={settings.includeAdvice}\n                onChange={(e) => handleSettingChange('includeAdvice', e.target.checked)}\n                className=\"form-checkbox h-5 w-5 text-blue-600\"\n              />\n              <span>アドバイスを含める</span>\n            </label>\n\n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={settings.includeCompatibility}\n                onChange={(e) => handleSettingChange('includeCompatibility', e.target.checked)}\n                className=\"form-checkbox h-5 w-5 text-blue-600\"\n              />\n              <span>相性診断結果を含める</span>\n            </label>\n\n            <div className=\"space-y-2\">\n              <label className=\"block\">カスタムメッセージ</label>\n              <textarea\n                value={settings.customMessage}\n                onChange={(e) => handleSettingChange('customMessage', e.target.value)}\n                className=\"w-full border rounded-md p-2\"\n                rows={3}\n                placeholder=\"シェア時に表示するメッセージを入力してください\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">プレビュー</h2>\n          <div className=\"border rounded-lg p-4\">\n            <div className=\"aspect-w-16 aspect-h-9 mb-4\">\n              <Image\n                src=\"https://placehold.co/600x400\"\n                alt=\"診断結果プレビュー\"\n                width={600}\n                height={400}\n                className=\"rounded-lg\"\n              />\n            </div>\n            {diagnoseData && (\n              <div className=\"text-gray-700\">\n                <p className=\"font-semibold\">性格タイプ: {diagnoseData.personality_type}</p>\n                <p className=\"mt-2\">{settings.customMessage}</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">シェア先を選択</h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <button\n              onClick={() => handleShare('twitter')}\n              className=\"flex items-center justify-center space-x-2 bg-[#1DA1F2] text-white p-3 rounded-lg hover:opacity-90\"\n            >\n              <FaTwitter className=\"text-xl\" />\n              <span>Twitter</span>\n            </button>\n            <button\n              onClick={() => handleShare('facebook')}\n              className=\"flex items-center justify-center space-x-2 bg-[#4267B2] text-white p-3 rounded-lg hover:opacity-90\"\n            >\n              <FaFacebook className=\"text-xl\" />\n              <span>Facebook</span>\n            </button>\n            <button\n              onClick={() => handleShare('line')}\n              className=\"flex items-center justify-center space-x-2 bg-[#00B900] text-white p-3 rounded-lg hover:opacity-90\"\n            >\n              <FaLine className=\"text-xl\" />\n              <span>LINE</span>\n            </button>\n            <button\n              onClick={() => handleShare('copy')}\n              className=\"flex items-center justify-center space-x-2 bg-gray-600 text-white p-3 rounded-lg hover:opacity-90\"\n            >\n              <FaLink className=\"text-xl\" />\n              <span>{copied ? 'コピーしました！' : 'URLをコピー'}</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    {
      "id": "BAC-007",
      "category": "データバックアップ",
      "handleName": "データエクスポート処理",
      "description": "ユーザーの診断履歴や設定データをエクスポートする",
      "handleProcedure": "1. ユーザーデータの取得\n2. データの整形と暗号化\n3. エクスポートファイルの生成\n4. 一時保存URLの生成\n5. ダウンロードURLの返却",
      "fileName": "data-export.ts",
      "relatedScreen": "SCR-011",
      "relatedFrontendCode": "\"use client\"\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { FiDownload, FiCheck, FiAlertCircle } from 'react-icons/fi'\nimport { IoMdSettings } from 'react-icons/io'\nimport { supabase } from '@/supabase'\nimport Link from 'next/link'\n\nconst Backup = () => {\n  const router = useRouter()\n  const [selectedItems, setSelectedItems] = useState({\n    personalityData: true,\n    diagnosisHistory: true,\n    userSettings: true\n  })\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [progress, setProgress] = useState(0)\n  const [status, setStatus] = useState<'idle' | 'processing' | 'success' | 'error'>('idle')\n  const [downloadUrl, setDownloadUrl] = useState('')\n\n  const handleItemToggle = (item: keyof typeof selectedItems) => {\n    setSelectedItems(prev => ({\n      ...prev,\n      [item]: !prev[item]\n    }))\n  }\n\n  const startBackup = async () => {\n    setIsProcessing(true)\n    setStatus('processing')\n    try {\n      const { data: { session } } = await supabase.auth.getSession()\n      if (!session) {\n        router.push('/login')\n        return\n      }\n\n      // Simulate progress\n      for (let i = 0; i <= 100; i += 10) {\n        setProgress(i)\n        await new Promise(resolve => setTimeout(resolve, 200))\n      }\n\n      const { data: userData } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', session.user.id)\n        .single()\n\n      const { data: diagnosisData } = await supabase\n        .from('personality_diagnoses')\n        .select('*')\n        .eq('user_id', session.user.id)\n\n      const backupData = {\n        userData: selectedItems.personalityData ? userData : null,\n        diagnosisHistory: selectedItems.diagnosisHistory ? diagnosisData : null,\n        timestamp: new Date().toISOString()\n      }\n\n      const blob = new Blob([JSON.stringify(backupData, null, 2)], { type: 'application/json' })\n      const url = window.URL.createObjectURL(blob)\n      setDownloadUrl(url)\n      setStatus('success')\n    } catch (error) {\n      console.error('Backup failed:', error)\n      setStatus('error')\n    } finally {\n      setIsProcessing(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-3xl mx-auto bg-white rounded-lg shadow-md p-6\">\n          <div className=\"flex items-center mb-6\">\n            <IoMdSettings className=\"text-2xl text-blue-600 mr-2\" />\n            <h1 className=\"text-2xl font-bold text-gray-800\">データバックアップ</h1>\n          </div>\n\n          <div className=\"space-y-4 mb-8\">\n            <div className=\"border rounded-lg p-4\">\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedItems.personalityData}\n                  onChange={() => handleItemToggle('personalityData')}\n                  className=\"form-checkbox h-5 w-5 text-blue-600\"\n                />\n                <span className=\"text-gray-700\">パーソナリティデータ</span>\n              </label>\n            </div>\n\n            <div className=\"border rounded-lg p-4\">\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedItems.diagnosisHistory}\n                  onChange={() => handleItemToggle('diagnosisHistory')}\n                  className=\"form-checkbox h-5 w-5 text-blue-600\"\n                />\n                <span className=\"text-gray-700\">診断履歴</span>\n              </label>\n            </div>\n\n            <div className=\"border rounded-lg p-4\">\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedItems.userSettings}\n                  onChange={() => handleItemToggle('userSettings')}\n                  className=\"form-checkbox h-5 w-5 text-blue-600\"\n                />\n                <span className=\"text-gray-700\">ユーザー設定</span>\n              </label>\n            </div>\n          </div>\n\n          {status === 'processing' && (\n            <div className=\"mb-6\">\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                <div\n                  className=\"bg-blue-600 h-2.5 rounded-full transition-all duration-500\"\n                  style={{ width: `${progress}%` }}\n                ></div>\n              </div>\n              <p className=\"text-sm text-gray-600 mt-2\">バックアップを作成中... {progress}%</p>\n            </div>\n          )}\n\n          {status === 'success' && (\n            <div className=\"mb-6 p-4 bg-green-50 rounded-lg flex items-center\">\n              <FiCheck className=\"text-green-500 mr-2\" />\n              <p className=\"text-green-700\">バックアップが完了しました</p>\n            </div>\n          )}\n\n          {status === 'error' && (\n            <div className=\"mb-6 p-4 bg-red-50 rounded-lg flex items-center\">\n              <FiAlertCircle className=\"text-red-500 mr-2\" />\n              <p className=\"text-red-700\">バックアップに失敗しました。もう一度お試しください。</p>\n            </div>\n          )}\n\n          <div className=\"flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4\">\n            <button\n              onClick={startBackup}\n              disabled={isProcessing || !Object.values(selectedItems).some(Boolean)}\n              className={`flex items-center justify-center px-6 py-3 rounded-lg ${\n                isProcessing || !Object.values(selectedItems).some(Boolean)\n                  ? 'bg-gray-300 cursor-not-allowed'\n                  : 'bg-blue-600 hover:bg-blue-700'\n              } text-white font-medium transition-colors duration-200`}\n            >\n              <FiDownload className=\"mr-2\" />\n              バックアップを作成\n            </button>\n\n            {downloadUrl && (\n              <a\n                href={downloadUrl}\n                download=\"backup.json\"\n                className=\"flex items-center justify-center px-6 py-3 rounded-lg bg-green-600 hover:bg-green-700 text-white font-medium transition-colors duration-200\"\n              >\n                ダウンロード\n              </a>\n            )}\n          </div>\n        </div>\n\n        <div className=\"mt-6 text-center\">\n          <Link\n            href=\"/settings\"\n            className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\"\n          >\n            設定画面に戻る\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Backup"
    },
    {
      "id": "BAC-008",
      "category": "データバックアップ",
      "handleName": "データインポート処理",
      "description": "エクスポートされたデータを検証してインポートする",
      "handleProcedure": "1. アップロードファイルの取得\n2. データの検証と復号化\n3. データの整合性チェック\n4. データベースへの保存\n5. インポート結果の返却",
      "fileName": "data-import.ts",
      "relatedScreen": "SCR-018",
      "relatedFrontendCode": "\"use client\"\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { supabase } from '@/supabase'\nimport { FaCloudUploadAlt, FaCheck, FaExclamationTriangle } from 'react-icons/fa'\nimport { BiArrowBack } from 'react-icons/bi'\nimport Link from 'next/link'\n\nconst RestorePage = () => {\n  const router = useRouter()\n  const [backups, setBackups] = useState([])\n  const [selectedBackup, setSelectedBackup] = useState(null)\n  const [selectedItems, setSelectedItems] = useState({\n    userData: true,\n    diagnosisData: true,\n  })\n  const [isRestoring, setIsRestoring] = useState(false)\n  const [status, setStatus] = useState('')\n\n  useEffect(() => {\n    fetchBackups()\n  }, [])\n\n  const fetchBackups = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (!user) {\n        router.push('/login')\n        return\n      }\n\n      const { data, error } = await supabase\n        .storage\n        .from('backups')\n        .list(`${user.id}/`)\n\n      if (error) throw error\n      setBackups(data || [])\n    } catch (error) {\n      console.error('バックアップの取得に失敗しました:', error)\n      // サンプルデータ\n      setBackups([\n        { name: 'backup_2024_01_01.json', created_at: '2024-01-01' },\n        { name: 'backup_2023_12_31.json', created_at: '2023-12-31' },\n      ])\n    }\n  }\n\n  const handleRestore = async () => {\n    if (!selectedBackup) {\n      setStatus('バックアップを選択してください')\n      return\n    }\n\n    setIsRestoring(true)\n    setStatus('リストア中...')\n\n    try {\n      const { data: { user } } = await supabase.auth.getUser()\n      const { data, error } = await supabase\n        .storage\n        .from('backups')\n        .download(`${user.id}/${selectedBackup.name}`)\n\n      if (error) throw error\n\n      const backupData = await data.text()\n      const parsedData = JSON.parse(backupData)\n\n      if (selectedItems.userData) {\n        await supabase\n          .from('users')\n          .upsert(parsedData.users)\n      }\n\n      if (selectedItems.diagnosisData) {\n        await supabase\n          .from('personality_diagnoses')\n          .upsert(parsedData.diagnoses)\n      }\n\n      setStatus('リストアが完了しました')\n    } catch (error) {\n      console.error('リストアに失敗しました:', error)\n      setStatus('リストアに失敗しました')\n    } finally {\n      setIsRestoring(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"mb-6 flex items-center\">\n          <Link href=\"/settings\" className=\"flex items-center text-gray-600 hover:text-gray-900\">\n            <BiArrowBack className=\"mr-2\" />\n            設定に戻る\n          </Link>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h1 className=\"text-2xl font-bold mb-6\">データリストア</h1>\n\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-semibold mb-4\">バックアップの選択</h2>\n            <div className=\"space-y-3\">\n              {backups.map((backup) => (\n                <div\n                  key={backup.name}\n                  className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                    selectedBackup?.name === backup.name\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-200 hover:border-blue-300'\n                  }`}\n                  onClick={() => setSelectedBackup(backup)}\n                >\n                  <div className=\"flex items-center\">\n                    <FaCloudUploadAlt className=\"text-gray-500 mr-3\" size={24} />\n                    <div>\n                      <div className=\"font-medium\">{backup.name}</div>\n                      <div className=\"text-sm text-gray-500\">\n                        作成日: {new Date(backup.created_at).toLocaleDateString()}\n                      </div>\n                    </div>\n                    {selectedBackup?.name === backup.name && (\n                      <FaCheck className=\"ml-auto text-blue-500\" />\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-semibold mb-4\">リストア項目の選択</h2>\n            <div className=\"space-y-3\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedItems.userData}\n                  onChange={(e) =>\n                    setSelectedItems({ ...selectedItems, userData: e.target.checked })\n                  }\n                  className=\"form-checkbox h-5 w-5 text-blue-500\"\n                />\n                <span className=\"ml-3\">ユーザーデータ</span>\n              </label>\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedItems.diagnosisData}\n                  onChange={(e) =>\n                    setSelectedItems({ ...selectedItems, diagnosisData: e.target.checked })\n                  }\n                  className=\"form-checkbox h-5 w-5 text-blue-500\"\n                />\n                <span className=\"ml-3\">診断データ</span>\n              </label>\n            </div>\n          </div>\n\n          {status && (\n            <div\n              className={`mb-6 p-4 rounded-lg ${\n                status.includes('失敗')\n                  ? 'bg-red-100 text-red-700'\n                  : status.includes('完了')\n                  ? 'bg-green-100 text-green-700'\n                  : 'bg-blue-100 text-blue-700'\n              }`}\n            >\n              <div className=\"flex items-center\">\n                {status.includes('失敗') ? (\n                  <FaExclamationTriangle className=\"mr-2\" />\n                ) : status.includes('完了') ? (\n                  <FaCheck className=\"mr-2\" />\n                ) : null}\n                {status}\n              </div>\n            </div>\n          )}\n\n          <button\n            onClick={handleRestore}\n            disabled={isRestoring || !selectedBackup}\n            className={`w-full py-3 px-4 rounded-lg font-medium text-white ${\n              isRestoring || !selectedBackup\n                ? 'bg-gray-400 cursor-not-allowed'\n                : 'bg-blue-500 hover:bg-blue-600'\n            }`}\n          >\n            {isRestoring ? 'リストア中...' : 'リストアを実行'}\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RestorePage"
    },
    {
      "id": "BAC-009",
      "category": "相性診断",
      "handleName": "相性診断処理",
      "description": "2つの性格タイプ間の相性を分析し、適合度を算出する",
      "handleProcedure": "1. 比較する性格タイプデータの取得\n2. 相性診断アルゴリズムの適用\n3. 適合度の計算\n4. 詳細な相性分析レポートの生成\n5. 診断結果の返却",
      "fileName": "compatibility-analyze.ts",
      "relatedScreen": "SCR-019",
      "relatedFrontendCode": "\"use client\"\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { supabase } from '@/supabase'\nimport { FaUserFriends, FaChartLine, FaHeart, FaHandshake } from 'react-icons/fa'\nimport Image from 'next/image'\nimport Link from 'next/link'\n\nexport default function CompatibilityDiagnosis() {\n  const router = useRouter()\n  const [userType, setUserType] = useState('')\n  const [compareType, setCompareType] = useState('')\n  const [result, setResult] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [personalityTypes, setPersonalityTypes] = useState([])\n\n  useEffect(() => {\n    const fetchUserType = async () => {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (!user) {\n        router.push('/auth/login')\n        return\n      }\n\n      const { data, error } = await supabase\n        .from('personality_diagnoses')\n        .select('personality_type')\n        .eq('user_id', user.id)\n        .single()\n\n      if (data) {\n        setUserType(data.personality_type)\n      }\n    }\n\n    const fetchPersonalityTypes = async () => {\n      // サンプルデータ\n      const types = [\n        \"分析型\", \"外交型\", \"管理型\", \"探検型\",\n        \"論理型\", \"支援型\", \"指導型\", \"創造型\"\n      ]\n      setPersonalityTypes(types)\n    }\n\n    fetchUserType()\n    fetchPersonalityTypes()\n  }, [router])\n\n  const handleCompatibilityCheck = async () => {\n    if (!compareType) {\n      alert('比較する性格タイプを選択してください')\n      return\n    }\n\n    setLoading(true)\n    try {\n      // サンプルデータ\n      const sampleResult = {\n        compatibility: 85,\n        details: {\n          love: 90,\n          work: 80,\n          friendship: 85\n        },\n        advice: \"非常に良い相性です。お互いの長所を活かし合える関係性が期待できます。\"\n      }\n      setResult(sampleResult)\n\n      await supabase.from('advice_records').insert({\n        category: 'compatibility',\n        advice_content: sampleResult\n      })\n    } catch (error) {\n      console.error('Error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-6 flex items-center\">\n            <FaUserFriends className=\"mr-2 text-blue-500\" />\n            相性診断\n          </h1>\n\n          <div className=\"mb-8\">\n            <h2 className=\"text-xl font-semibold mb-4\">あなたの性格タイプ</h2>\n            <div className=\"p-4 bg-blue-50 rounded-lg\">\n              <p className=\"text-lg\">{userType || \"未診断\"}</p>\n            </div>\n          </div>\n\n          <div className=\"mb-8\">\n            <h2 className=\"text-xl font-semibold mb-4\">比較する性格タイプを選択</h2>\n            <select\n              className=\"w-full p-3 border rounded-lg\"\n              value={compareType}\n              onChange={(e) => setCompareType(e.target.value)}\n            >\n              <option value=\"\">選択してください</option>\n              {personalityTypes.map((type) => (\n                <option key={type} value={type}>{type}</option>\n              ))}\n            </select>\n          </div>\n\n          <button\n            onClick={handleCompatibilityCheck}\n            disabled={loading}\n            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-lg transition duration-300\"\n          >\n            {loading ? \"診断中...\" : \"相性を診断する\"}\n          </button>\n        </div>\n\n        {result && (\n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\n            <h2 className=\"text-2xl font-bold mb-6 flex items-center\">\n              <FaChartLine className=\"mr-2 text-green-500\" />\n              診断結果\n            </h2>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              <div className=\"bg-pink-50 p-4 rounded-lg text-center\">\n                <FaHeart className=\"mx-auto text-2xl text-pink-500 mb-2\" />\n                <p className=\"font-semibold\">恋愛面の相性</p>\n                <p className=\"text-2xl font-bold text-pink-500\">{result.details.love}%</p>\n              </div>\n              <div className=\"bg-blue-50 p-4 rounded-lg text-center\">\n                <FaHandshake className=\"mx-auto text-2xl text-blue-500 mb-2\" />\n                <p className=\"font-semibold\">仕事面の相性</p>\n                <p className=\"text-2xl font-bold text-blue-500\">{result.details.work}%</p>\n              </div>\n              <div className=\"bg-green-50 p-4 rounded-lg text-center\">\n                <FaUserFriends className=\"mx-auto text-2xl text-green-500 mb-2\" />\n                <p className=\"font-semibold\">友情面の相性</p>\n                <p className=\"text-2xl font-bold text-green-500\">{result.details.friendship}%</p>\n              </div>\n            </div>\n\n            <div className=\"bg-gray-50 p-6 rounded-lg mb-6\">\n              <h3 className=\"text-xl font-semibold mb-4\">総合評価</h3>\n              <div className=\"flex items-center justify-center mb-4\">\n                <div className=\"text-4xl font-bold text-blue-500\">{result.compatibility}%</div>\n              </div>\n              <p className=\"text-gray-700\">{result.advice}</p>\n            </div>\n\n            <div className=\"flex justify-center space-x-4\">\n              <Link\n                href=\"/advice\"\n                className=\"bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-lg transition duration-300\"\n              >\n                戻る\n              </Link>\n              <button\n                onClick={() => setResult(null)}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition duration-300\"\n              >\n                別の診断を行う\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}"
    },
    {
      "id": "BAC-010",
      "category": "セキュリティ",
      "handleName": "プライバシー設定の適用",
      "description": "ユーザーのプライバシー設定に基づいて、表示データをフィルタリングする",
      "handleProcedure": "1. ユーザーのプライバシー設定の取得\n2. 表示データの取得\n3. プライバシー設定に基づくフィルタリング\n4. アクセス権のチェック\n5. フィルタリング済みデータの返却",
      "fileName": "privacy-filter.ts",
      "relatedScreen": "SCR-017",
      "relatedFrontendCode": "\"use client\"\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { FiLock, FiBell, FiShare2, FiSave } from 'react-icons/fi'\nimport { supabase } from '@/supabase'\n\nexport default function PrivacySettings() {\n  const router = useRouter()\n  const [settings, setSettings] = useState({\n    profileVisibility: 'private',\n    notificationEnabled: true,\n    dataSharing: {\n      personalityType: false,\n      adviceHistory: false,\n      diagnosticResults: false\n    }\n  })\n  const [loading, setLoading] = useState(false)\n  const [message, setMessage] = useState('')\n\n  useEffect(() => {\n    fetchSettings()\n  }, [])\n\n  const fetchSettings = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (!user) {\n        router.push('/login')\n        return\n      }\n\n      const { data, error } = await supabase\n        .from('user_settings')\n        .select('privacy_settings')\n        .eq('user_id', user.id)\n        .single()\n\n      if (error) throw error\n      if (data?.privacy_settings) {\n        setSettings(data.privacy_settings)\n      }\n    } catch (error) {\n      console.error('Error fetching settings:', error)\n    }\n  }\n\n  const saveSettings = async () => {\n    try {\n      setLoading(true)\n      const { data: { user } } = await supabase.auth.getUser()\n      if (!user) {\n        router.push('/login')\n        return\n      }\n\n      const { error } = await supabase\n        .from('user_settings')\n        .upsert({\n          user_id: user.id,\n          privacy_settings: settings,\n          updated_at: new Date().toISOString()\n        })\n\n      if (error) throw error\n      setMessage('設定を保存しました')\n      setTimeout(() => setMessage(''), 3000)\n    } catch (error) {\n      console.error('Error saving settings:', error)\n      setMessage('設定の保存に失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"max-w-3xl mx-auto py-8 px-4\">\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-8\">プライバシー設定</h1>\n\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n          <div className=\"flex items-center mb-4\">\n            <FiLock className=\"text-blue-500 mr-2\" size={20} />\n            <h2 className=\"text-lg font-semibold\">公開範囲設定</h2>\n          </div>\n          <select\n            value={settings.profileVisibility}\n            onChange={(e) => setSettings({...settings, profileVisibility: e.target.value})}\n            className=\"w-full p-2 border rounded-md\"\n          >\n            <option value=\"private\">非公開</option>\n            <option value=\"friends\">フレンドのみ</option>\n            <option value=\"public\">公開</option>\n          </select>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n          <div className=\"flex items-center mb-4\">\n            <FiBell className=\"text-blue-500 mr-2\" size={20} />\n            <h2 className=\"text-lg font-semibold\">通知設定</h2>\n          </div>\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={settings.notificationEnabled}\n              onChange={(e) => setSettings({...settings, notificationEnabled: e.target.checked})}\n              className=\"mr-2\"\n            />\n            通知を受け取る\n          </label>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n          <div className=\"flex items-center mb-4\">\n            <FiShare2 className=\"text-blue-500 mr-2\" size={20} />\n            <h2 className=\"text-lg font-semibold\">データ共有設定</h2>\n          </div>\n          <div className=\"space-y-3\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.dataSharing.personalityType}\n                onChange={(e) => setSettings({\n                  ...settings,\n                  dataSharing: {...settings.dataSharing, personalityType: e.target.checked}\n                })}\n                className=\"mr-2\"\n              />\n              性格タイプの共有を許可\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.dataSharing.adviceHistory}\n                onChange={(e) => setSettings({\n                  ...settings,\n                  dataSharing: {...settings.dataSharing, adviceHistory: e.target.checked}\n                })}\n                className=\"mr-2\"\n              />\n              アドバイス履歴の共有を許可\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.dataSharing.diagnosticResults}\n                onChange={(e) => setSettings({\n                  ...settings,\n                  dataSharing: {...settings.dataSharing, diagnosticResults: e.target.checked}\n                })}\n                className=\"mr-2\"\n              />\n              診断結果の共有を許可\n            </label>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end\">\n          <button\n            onClick={saveSettings}\n            disabled={loading}\n            className=\"flex items-center bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-md transition-colors\"\n          >\n            <FiSave className=\"mr-2\" />\n            {loading ? '保存中...' : '設定を保存'}\n          </button>\n        </div>\n\n        {message && (\n          <div className=\"mt-4 p-3 bg-green-100 text-green-700 rounded-md\">\n            {message}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}"
    }
  ]
}
